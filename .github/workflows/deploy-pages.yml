# 静的コンテンツを GitHub Pages にデプロイするためのシンプルなワークフロー
name: Deploy static content to Pages

on:
  # mainブランチを対象としたプッシュ・プルリクエスト時に実行されます
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

  # Actionsタブから手動でワークフローを実行できるようにします
  workflow_dispatch:

# GITHUB_TOKEN のパーミッションを設定し、GitHub Pagesへのデプロイを許可します
permissions:
  contents: read
  pages: write
  id-token: write

# 1つの同時デプロイメントを可能にする
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # デプロイするだけなので、単一のデプロイジョブ
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.10
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Download pmtiles
        run: |
          mkdir -p dist/pmtiles
          USER=${{ github.repository_owner }}
          REPO=${{ github.event.repository.name }}
          # GitHub APIを使って最新リリースの情報を取得
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/$USER/$REPO/releases/latest)
          # アセットのダウンロードURLを抽出し、`.pmtiles`で終わるものをフィルタリング
          ASSETS=$(echo $LATEST_RELEASE | jq -r '.assets[] | select(.name | endswith(".pmtiles")) | .browser_download_url')
          # dist/pmtilesフォルダに移動して、フィルタリングされた各アセットをダウンロード
          cd dist/pmtiles
          for ASSET in $ASSETS; do
            curl -L -O $ASSET
          done
          cd ../..
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # dist フォルダーのアップロード
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
